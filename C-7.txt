COURSE-7-RPROGRAMMING

-- Module 2
==> Vectors and lists in R
  A data structure is a format for organizing and storing data. The most common data structures in the R programming language include vectors, data frames, matrices, and arrays.
 - Think of a data structure as a house that contains your data. The separate parts of a house, such as bricks or boards, don’t provide shelter on their own. But talented builders can use their skills and expertise, along with a blueprint, to build a functional house. Data structures are similar: Single data elements don’t give you much information, but when data elements are combined into vectors, data frames, and other data structures, a talented data analyst can use them to solve a business challenge. 

There are two types of vectors in R: atomic vectors and lists. 

==> Atomic vectors 
First, you’ll explore the different types of atomic vectors. Then, you’ll learn how to use R code to create, identify, and name the vectors. You’ll also learn how to extract a subset of a vector.

In R, a vector is a group of data elements of the same type, stored in a one-dimensional sequence. Vectors can only contain data of one type. 

There are six primary types of atomic vectors: logical, integer, double, character (which contain strings), complex, and raw. The last two–complex and raw–aren’t as common in data analysis, so you’ll focus on the first four in this course. Together, integers and double vectors are known as numeric vectors because they both contain numbers. 


==> Create vectors  
One way to create a vector in R is with the c() function. This function combines multiple values into a vector. To use it, enter the letter c followed by the values you want in your vector inside the parentheses, separated by a comma: c(x, y, z).


==>Date and Time
--> Load tidyverse and lubridate packages
>install.packages("tidyverse").
>library(tidyverse)
>library(lubridate)

--> Work with dates and times 
-- Types
In R, there are three types of data that refer to an instant in time:

- A date ("2016-08-16")
- A time within a day ("20:11:59 UTC")
- And a date-time. This is a date plus a time ("2018-03-31 18:15:48 UTC")

--> When you use  R for analysis, you may need to create date-time formats using the following methods: 
- From a string
- From an existing date/time object

For each of these methods, R creates dates in the standard yyyy-mm-dd format by default.

==>Data Frame
Data frames are the most common way of storing and analyzing data in R, so it’s important to understand what they are and how to create them. A data frame is a collection of columns containing data, similar to a spreadsheet or SQL table. Each column has a name that represents a variable and includes one observation per row. Data frames summarize data and organize it into a format that is easy to read and use. 
--> There are a few key things to keep in mind when working with data frames: 

- Data frames can include many different types of data, including numeric, logical, or character.
- Data frames can have only one element in each cell.
- Each column should be named. 
- Each column should consist of elements of the same data type.

LOADING TIDYVERSE AND browseVignettes function.
--> A vignette is documentation that acts as a guide to an R package. A vignette shares details about the problem that the package is designed to solve and how the included functions can help you solve it. The browseVignettes function allows you to read through vignettes of a loaded package.

there's four packages that are an essential part of the workflow for data analysts: ggplot2, dplyr, tidyr and readr. You'll most likely use these more often than the others. Ggplot2 is used for data visualization, specifically plots. With ggplot2, you can create a variety of data viz by applying different visual properties to the data variables. Here's an example of ggplot2 in action. You'll have your own chance to use ggplot2 later. Tidyr is a package used for data cleaning to make tidy data. We covered tidy or clean data earlier, but as a quick reminder, it's data where every part of a data table or data frame is the right type in the right place. Tidyr works with wide and long data to make sure this happens. Next, we have readr, which is used for importing data. The most common function from readr is read_csv. This will import a CSV file into R. A CSV file contains data separated by commas in a table format. To accurately read a dataset with readr, you combine the function with a column specification. The column specification describes how each column should be converted to the most appropriate data type. It's good to keep in mind this isn't usually necessary because readr will figure it out for you automatically. We'll come across readr functions as we continue to explore R. Now on to dplyr. Dplyr offers a consistent set of functions that help you complete some common data manipulation tasks. For example, the select function picks variables based on their names, and the filter function finds cases where certain conditions are true. And, yes, dplyr is another package we'll get to later.

Tibble works with data frames. Purrr works with functions and vectors helping make your code easier to write and more expressive. Stringr includes functions that make it easier to work with strings.
Forcats provides tools that solve common problems with factors. As a quick reminder, factors store categorical data in R where the data values are limited and usually based on a finite group like country or year. Using the tidyverse and its packages will help you fine-tune your analysis.


Glossary terms from module 2
Terms and definitions for Course 7, Module 2
Argument (R): Information needed by a function in R in order to run

Assignment operator (R): An operator used to assign values to variables and vectors

C#: An object-oriented programming language used to create games and mobile apps in the .NET open source developer platform

C++: An extension of the C programming language that is used to create console games, such as those for Xbox

Case study: A common way for employers to assess job skills and gain insight into how a candidate approaches common data-related challenges

dplyr (R): An R package in Tidyverse that offers a consistent set of functions to complete common data-manipulation tasks

Factor (R): An object that stores categorical data where the data values are limited and usually based on a finite group, such as country or year

Function (R): A body of reusable code for performing specific tasks in R

ggplot2 (R): An R package in Tidyverse that creates a variety of data visualizations by applying different visual properties to the data variables in R

Library: A directory containing all of a data analyst’s installed packages

Logical operator: An operator that returns a logical data type

Matrix: A two-dimensional collection of data elements with rows and columns

Nested: Code that performs a particular function and is contained within code that performs a broader function

Nested function: A function that is completely contained within another function

Package (R): A unit of reproducible R code

Pipe (R): A tool in R for expressing a sequence of multiple operations, represented with “%>%”

readr (R): An R package in Tidyverse used for importing data

tidyr (R): An R package in Tidyverse used for data cleaning to make tidy data

Tidyverse (R): A system of packages in R with a common design philosophy for data manipulation, exploration, and visualization

Variable (R): A representation of a value in R that can be stored for later use 

Vector (R): A group of data elements of the same type stored in a one-dimensional sequence in R

Vignette (R): Documentation for an R package that describes the problem the package is designed to solve, explains how its functions can be used, and lists any dependencies on other packages


==> Tibble:
Tibbles offer a streamlined approach to data management, automatically displaying only the first 10 rows of a dataset and only as many columns as can fit on your screen. This makes it easier to handle large datasets while maintaining the integrity of your variable names and data types. Using tibbles in R can make your data exploration more efficient, ensure data integrity, and reduce the risk of errors and data mishandling. The seamless integration of tibbles with the tidyverse ecosystem aligns with industry best practices. Proficiency with tibbles can be a powerful addition to your data analysis toolkit.


LOading the packages and shit
---
title: "Lesson 2: Import Solutions"
---
If you experience errors, remember that you can search the internet and the RStudio community for help:
https://community.rstudio.com/#

## Step 1: Load packages
Start by installing your required package. If you have already installed and loaded `tidyverse` in this session, feel free to skip the code chunks in this step.
```{r}
install.packages("tidyverse")
```
```{r}
library(tidyverse)
```
## Step 2: Import data
download the csv file

In the chunk below, you will use the `read_csv()` function to import data from a .csv in the project folder called "hotel_bookings.csv" and save it as a data frame called `bookings_df`:
```{r}
bookings_df <- read_csv("hotel_bookings.csv")
```
Now that you have the `bookings_df`, you can work with it using all of the  `R` functions you have learned so far. 

## Step 3: Inspect & clean data
One common function you can use to preview the data is the `head()` function, which returns the columns and first several rows of data. Check out the `head()` function by running the chunk below:
```{r}
head(bookings_df)
```

Check out the `str()` function by running the code chunk below:
```{r}
str(bookings_df)
```

To find out what columns you have in your data frame, try running the the `colnames()` function in the code chunk below:
```{r}
colnames(bookings_df)
```

If you want to create another data frame using `bookings_df` that focuses on the average daily rate, which is referred to as `adr` in the data frame, and  `adults`, you can use the following code chunk to do that:
```{r}
new_df <- select(bookings_df, `adr`, adults)
```

To create new variables in your data frame, you can use the `mutate()` function. This will make changes to the data frame, but not to the original data set you imported. That source data will remain unchanged. 
```{r}
mutate(new_df, total = `adr` / adults)
```

## Step 4: Import your own data
Now you can find your own .csv to import! Using the RStudio Cloud interface, import and save the file in the same folder as this R Markdown document. Then write code in the chunk below to read that data into `R`:
```{r}
own_df <- read_csv("<filename.csv>")
```




=====> Lesson 3: Cleaning Solution

In the chunk below, you will use the `read_csv()` function to import data from a .csv in the project folder called "hotel_bookings.csv" and save it as a data frame called `bookings_df`:

```{r}
bookings_df <- read_csv("hotel_bookings.csv")
```
## Step 3: Getting to know your data

Before you start cleaning your data, take some time to explore it. You can use several functions that you are already familiar with to preview your data, including the `head()` function in the code chunk below:

```{r}
head(bookings_df)
```

You can summarize or preview the data with the `str()` and `glimpse()` functions to get a better understanding of the data by running the code chunks below:

```{r}
str(bookings_df)
```

```{r}
glimpse(bookings_df)
```

You can also use `colnames()` to check the names of the columns in your data set. Run the code chunk below to find out the column names in this data set:

```{r}
colnames(bookings_df)
```

Use the `skim_without_charts()` function from the `skimr` package by running the code below:

```{r}
skim_without_charts(bookings_df)
```
## Step 4: Cleaning your data

Based on your notes you are primarily interested in the following variables: hotel, is_canceled, lead_time. Create a new data frame with just those columns, calling it `trimmed_df`.

```{r}
trimmed_df <- bookings_df %>% 
  select(hotel, is_canceled, lead_time)
```

Rename the variable 'hotel' to be named 'hotel_type' to be crystal clear on what the data is about:

```{r}
trimmed_df %>% 
  select(hotel, is_canceled, lead_time) %>% 
  rename(hotel_type = hotel)
```

In this example, you can combine the arrival month and year into one column using the unite() function:

```{r}
example_df <- bookings_df %>%
  select(arrival_date_year, arrival_date_month) %>% 
  unite(arrival_month_year, c("arrival_date_month", "arrival_date_year"), sep = " ")
```

## Step 5: Another way of doing things

You can also use the`mutate()` function to make changes to your columns. Let's say you wanted to create a new column that summed up all the adults, children, and babies on a reservation for the total number of people. Modify the code chunk below to create that new column: 

```{r}
example_df <- bookings_df %>%
  mutate(guests = adults + children + babies)

head(example_df)
```
Great. Now it's time to calculate some summary statistics! Calculate the total number of canceled bookings and the average lead time for booking - you'll want to start your code after the %>% symbol. Make a column called 'number_canceled' to represent the total number of canceled bookings. Then, make a column called 'average_lead_time' to represent the average lead time. Use the `summarize()` function to do this in the code chunk below:

```{r}
example_df <- bookings_df %>%
  summarize(number_canceled = sum(is_canceled),
            average_lead_time = mean(lead_time))

head(example_df)


==> R markdown
R Markdown is a useful tool that allows you to save and execute code, and generate shareable reports for stakeholders

==>Jupyter notebooks are documents that contain computer code and rich text elements – such as comments, links, or descriptions of your analysis and results. You will find them used in a variety of online tools, including Project Jupyter, Kaggle, and Google Colaboratory 
These notebooks can be executable documents that you can run to perform an analysis
-- Jupyter notebooks in Kaggle
If you are working in Kaggle, there are two types of notebooks available: Jupyter notebooks and scripts 
-- Jupyter notebooks in Google Colab
Google Colab is a product from Google Research. Colab is a hosted Jupyter notebook service that requires no setup to use.
-- to install R Markdown - run 'install.packages('rmarkdown') '
The knit button can be used to save an R Markdown document as a shareable HTML report. 
A data analyst has code chunks in their R Markdown file. they appear in an HTML report as generated Output
```
